package io.pierre.rtcrestfulapi;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Base64;
import java.util.Map;

import javax.xml.bind.DatatypeConverter;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.CookieSpecs;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.params.CookiePolicy;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class RestfulAPITools {

	public static String[] kickoutSomebody(Map<String, String> map) throws ParseException, IOException {
		String[] str = null;
		HttpClient httpClient = HttpClients.createDefault();
		HttpPost httpPost = new HttpPost("https://api.agora.io/dev/v1/kicking-rule");

		String cusID = map.get("cusID");
		String cusCer = map.get("cusCer");
		String appid = map.get("appid");
		String cname = map.get("cname");
		String uid = map.get("uid");
		String ip = map.get("ip");
		String time = map.get("time");

		// username:password--->访问的用户名，密码,并使用base64进行加密，将加密的字节信息转化为string类型，encoding--->token

		String input = cusID + ":" + cusCer;
		String encoding = DatatypeConverter.printBase64Binary(input.getBytes("UTF-8"));

		String body = "{\"appid\":\"" + appid + "\"," + "\"cname\":\"" + cname + "\"," + "\"uid\":\"" + uid + "\","
				+ "\"ip\":\"" + ip + "\"," + "\"time\":\"" + time + "\"" + "}";

		httpPost.setHeader("Content-type", "application/json;charset=utf-8");
		httpPost.setHeader("Authorization", "Basic " + encoding);
		httpPost.setEntity(new StringEntity(body));

		HttpResponse response = httpClient.execute(httpPost);

		HttpEntity entity = response.getEntity();
		String content = EntityUtils.toString(entity, "utf-8");
		System.out.println(content);
		System.out.println(httpPost.getURI());
		System.out.println(response);
		str = new String[] {content,response.toString()};
		return str;
	}
	
	public static String[] QueryUserStatus(Map<String, String> map) throws ClientProtocolException, IOException {
		String[] str = null;
		String result = "";
		String cusId = map.get("cusId");
		String cusCer = map.get("cusCer");
		String appId = map.get("appId");
		String cname = map.get("cname");
		String uid = map.get("uid");

		String url = "https://api.agora.io/dev/v1/channel/user/property/" + appId + "/" + uid + "/" + cname;

		HttpClient httpclient = HttpClientBuilder.create().build();
		HttpGet httpget = new HttpGet(url);

		String inputencoding = cusId + ":" + cusCer;
		String encoding = DatatypeConverter.printBase64Binary(inputencoding.getBytes("UTF-8"));
		
		httpget.setHeader("Authorization", "Basic " + encoding);
		HttpResponse response = httpclient.execute(httpget);
		StatusLine statusLine = response.getStatusLine();
		int responseCode = statusLine.getStatusCode();

		System.out.println(responseCode);
		if (responseCode == 200) {
			HttpEntity entity = response.getEntity();
			InputStream input = entity.getContent();
			BufferedReader br = new BufferedReader(new InputStreamReader(input));
			String str1 = br.readLine();
			result = new String(str1.getBytes("gbk"), "utf-8");
			System.out.println("服务器的响应是:" + result);
			br.close();
			input.close();
		} else {
			result = "response invalid";
			System.out.println("响应失败!");
		}

		str = new String[] {String.valueOf(responseCode), result};
		return str;
	}
	
	public static String[] QueryUserList(Map<String, String> map) {
		String[] str = null;
		String result = "";
		String cusId = map.get("cusId");
		String cusCer = map.get("cusCer");
		String appId = map.get("appId");
		String cname = map.get("cname");

		String requestUrl = "https://api.agora.io/dev/v1/channel/user/" + appId + "/" + cname;
		HttpURLConnection connection = null;
		URL url = null;
		int responseCode = 0;

		final Base64.Encoder encoder = Base64.getEncoder();
		String inputencoding = cusId + ":" + cusCer;
		String encoding = encoder.encodeToString(inputencoding.getBytes(Charset.forName("utf-8")));

		try {

			// 新建一个URL对象
			url = new URL(requestUrl);
			// 打开一个HttpURLConnection连接
			connection = (HttpURLConnection) url.openConnection();
			// 设置连接主机超时时间
			connection.setConnectTimeout(5 * 1000);
			// 设置从主机读取数据超时
			connection.setReadTimeout(5 * 1000);
			// 设置是否使用缓存 默认是true
			connection.setUseCaches(true);
			// 设置为Post请求
			connection.setRequestMethod("GET");
			// urlConn设置请求头信息
			// 设置请求中的媒体类型信息。
			connection.setRequestProperty("Content-Type", "application/json");

			// 设置客户端与服务连接类型
			connection.addRequestProperty("Connection", "Keep-Alive");
			connection.addRequestProperty("Authorization", "Basic " + encoding);
			// 开始连接
			connection.connect();
			
			responseCode =connection.getResponseCode();
			// Log.v(TAG, String.valueOf(connection.getResponseCode()));
			// 判断请求是否成功
			if (responseCode == 200) {
				// 获取返回的数据
				 result = streamToString(connection.getInputStream());
				// Log.e(TAG, "Get方式请求成功，result--->" + result);
			} else {
				// Log.e(TAG, "Get方式请求失败");
			}
			// 关闭连接
			connection.disconnect();
		} catch (IOException e) {
			e.printStackTrace();
		}

		str = new String[] { String.valueOf(responseCode), result };
		return str;
	}

	private static String streamToString(InputStream inputStream) {
		BufferedReader bufferedReader = null;
		StringBuilder stringBuilder = new StringBuilder();
		String responseString = null;
		bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
		String currentLine = null;
		try {
			while ((currentLine = bufferedReader.readLine()) != null) {
				stringBuilder.append(currentLine);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		responseString = stringBuilder.toString();
		return responseString;
	}
	
	
	public static String[] QueryChannelList(Map<String, String> map){
		
	}
}
